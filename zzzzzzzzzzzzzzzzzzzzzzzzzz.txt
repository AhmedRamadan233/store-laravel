-----------------------------------------------------------------------------
<?php

namespace App\Models;

use App\Observers\CartObserver;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use App\Models\Product;

class Cart extends Model
{
    use HasFactory;

    public $incrementing = false;
    protected $fillable=[
        'cookie_id',
        'user_id',
        'product_id',
        'quantity',
        'options'
    ];

    // opservars (events)
        // events occure on model (edit delete ....)
            // creating , created  updating , updated 
            // saving , saved  deleteing , deleted  restoring , restored retrieved
    // بقوله و انتا بتجهز عملية الانسيرت خد ال الي دي دا معاك
    protected static function booted(){
        static::observe(CartObserver::class);

        // static::creating(function(Cart $cart){
        //     $cart->id = Str::uuid();
        // });
    } 

    public function user(){
        return $this->belongsTo(User::class)->withDefault([
            'name' => 'Anonymous'
        ]);
    }

    public function product(){
        return $this->belongsTo(Product::class);
    }
}

-----------------------------------------------------------------------------
<?php 

namespace App\Repositories\Cart;

use App\Models\Product;
use Illuminate\Support\Collection;

interface CartRepository  

{
    
    public function get() : Collection;
    public function add(Product $product, $quantity=1);
    public function update(Product $product , $quantity);
    public function delete($id);

    public function empty();
    public function total():float;

    
}

-----------------------------------------------------------------------------
<?php 

namespace App\Repositories\Cart;


use App\Models\Cart;
use App\Models\Product;
use Carbon\Carbon;
use Illuminate\Support\Collection ;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Str;
use App\Repositories\Cart\CartRepository;

class CartModelRepository implements CartRepository
{
    public function get(): Collection
    {
        return Cart::where('cookie_id' , '=' , $this->getCookieId())->get();
    }

    
    public function add(Product $product , $quantity=1)
    {
        return Cart::create([
            'cookie_id' =>$this->getCookieId(),
            'user_id' => Auth::id(),
            'product_id' => $product->id(),
            'quantity' => $quantity,
        ]);
    }

    public function update(Product $product, $quantity)
    {
        Cart::where('product_id', '=',$product->id)
            ->where('cookie_id' ,'=', $this->getCookieId()) 
            ->update([
                'quantity' => $quantity,
            ]);
    }

    public function delete($id)
    {
        Cart::where('id', '=',$id)
            ->where('cookie_id' ,'=', $this->getCookieId()) 
            ->delete();
    }

    public function empty()
    {
        Cart::where('cookie_id' ,'=', $this->getCookieId()) ->delete();
    }

    public function total() : float
    {
        return (float) Cart::where('cookie_id' , '=' ,  $this->getCookieId())
            ->join('products' , 'product.id', '=' , 'carts.product_id')
            ->selectRow('SUM(products.price * carts.quantity) as total')
            ->value('total');
    }
    public function getCookieId(){
        $cookie_id = Cookie::get('cart_id');
        if(!$cookie_id){
            $cookie_id = Str::uuid();
            Cookie::queue('cart_id', $cookie_id , 30*24*60);
        }

        return $cookie_id;
    }
        
}

-----------------------------------------------------------------------------
<?php

namespace App\Http\Controllers\Website;

use App\Http\Controllers\Controller;
use App\Repositories\Cart\CartRepository;
use Illuminate\Http\Request;
use App\Models\Product;
class CartController extends Controller
{


    public function index(CartRepository $cart)
    {
        // dd( $cart);

        $items =  $cart->get();
       
        // return view('product');
        return response()->json(['data' => $items]);
    }

    public function store(Request $request, CartRepository $cart)
    {
        // $request->validate([
        //     'product_id' => ['required', 'integer', 'exists:products,id'],
        //     'quantity' => ['nullable', 'integer', 'min:1'],
        // ]);
    
        $product = Product::findOrFail($request->post('productId'));
        // dd($product);    
        $cart->add($product, $request->input('quantity'));
        
        return response()->json(['message' => 'Product added to cart successfully' , ]);
    }
    

public function update(Request $request, CartRepository $cart)
{
    $this->validate($request, [
        'product_id' => 'required|exists:products,id',
        'quantity' => 'required|integer|min:1',
    ]);

    $productId = $request->input('product_id');
    $quantity = $request->input('quantity');

    // Get the product by its ID
    $product = Product::findOrFail($productId);

    // Now, you can use $product->id to access the ID if needed

    // Update the cart with the product and quantity
    $cart->update($product, $quantity);

    return response()->json(['message' => 'Product added to cart successfully']);
}

    public function destroy(CartRepository $cart , $id)
    {
        $cart->delete($id);
        return response()->json(['message' => 'Product removed from cart successfully']);
    }
}

-----------------------------------------------------------------------------
<?php

namespace App\Models;

use App\Models\Scopes\StoreScope;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder as EloquentBuilder;
use Illuminate\Support\Facades\Auth;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'store_id',
        'category_id',
        'name',
        'slug',
        'description',
        'image',
        'price',
        'compare_price',
        'options',
        'rating',
        'features',
        'status',
    ];

    // static function booted as a bootsrab in service container 
    // as a constructor 
    // worked first when use this odel 
    // protected static function booted()
    // {
    //     // in controller can i use withoutGlobalScope
    //     static::addGlobalScope('store', function (Builder $builder) {
    //         $user = Auth::user();
            
    //         if ($user->store_id) {
    //             $builder->where('store_id', '=', $user->store_id);
    //         }
    //     });
    // }
    protected static function booted()
    {
        // that is error    "message": "Global scope must be an instance of Closure or Scope.",
        // he said i want a object from class not class 
        // static::addGlobalScope('store', StoreScope::class);
        static::addGlobalScope('store' , new StoreScope());
    }

    public function category(){
        return $this->belongsTo(Category::class, 'category_id' , 'id');
    }
    public function store(){
        return $this->belongsTo(Store::class, 'store_id' , 'id');
    }

    public function tags(){
        return $this->belongsToMany(
            Tag::class,     // Related Model
            'product_tag',  // Pivot table name
            'product_id',   // FK in pivot table for the current model
            'tag_id',       // FK in pivot table for the related model
            'id',           // PK current model
            'id'            // PK related model
        );
    }
    public function productCode()
    {
        return $this->belongsTo(ProductCode::class, 'product_code_id', 'id');
    }
    public function scopeFilter(EloquentBuilder $builder, $filters)
    {
        $name = $filters['name'] ?? null;

        if ($name) {
            $builder->where('name', 'LIKE', "%$name%");
        }
    }

    public function scopeActive(EloquentBuilder $builder)
    {
        $builder->where('status', '=', 'active');
    }
}

-----------------------------------------------------------------------------
{
    "message": "Call to undefined method App\\Models\\Product::id()",
    "exception": "BadMethodCallException",
    "file": 
