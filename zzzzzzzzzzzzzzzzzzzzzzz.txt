my route
-------------------------------------------------------------------------------------------------------------------
Route::prefix('website')->middleware(['auth:sanctum', 'auth.type:admin,super-admin'])->group(function(){
    // website routes
    Route::get('/', [HomeController::class, 'index'])->name('website');
    // products routes
    Route::prefix('products')->group(function () {
        // Get all Product
        Route::get('/', [WebsiteProductController::class, 'getAllProducts'])->name('getAllProducts');
        Route::get('/{product:slug}', [WebsiteProductController::class, 'getProductBySlug'])->name('getProductBySlug');
    });
    Route::prefix('cart')->group(function () {
        Route::get('/', [CartController::class, 'index'])->name('cart.index');
        Route::post('/store', [CartController::class, 'store'])->name('cart.store');
        Route::put('/update', [CartController::class, 'update'])->name('cart.update');
        Route::delete('/destroy/{id}', [CartController::class, 'destroy'])->name('cart.destroy');
        Route::get('/total', [CartController::class, 'total'])->name('cart.total');
    });
    Route::get('/checkout', [CheckoutController::class, 'create'])->name('checkout.create');
    Route::post('/checkout', [CheckoutController::class, 'store'])->name('checkout.store');
});
-------------------------------------------------------------------------------------------------
my controller
-------------------------------------------------------------------------------------------------
<?php
namespace App\Http\Controllers\website;
use App\Http\Controllers\Controller;
use App\Models\Order;
use App\Models\OrderItem;
use App\Repositories\Cart\CartRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
class CheckoutController extends Controller
{
    public function create(CartRepository $cart)
    {
        $items = $cart->get();
        $items = $items->groupBy('product.store_id');
        return response()->json(['data' => $items]);
    }
        public function store(Request $request, CartRepository $cart)
    {


        $items = $cart->get()->groupBy('product.store_id')->all();

        DB::beginTransaction();
        try {
            foreach ($items as $store_id => $cart_items) {

                $order = Order::create([
                    'store_id' => $store_id,
                    'user_id' => Auth::id(),
                    'payment_method' => 'cod',
                ]);

                foreach ($cart_items as $item) {
                    OrderItem::create([
                        'order_id' => $order->id,
                        'product_id' => $item->product_id,
                        'product_name' => $item->product->name,
                        'price' => $item->product->price,
                        'quantity' => $item->quantity,
                    ]);
                }

                foreach ($request->post('addr') as $type => $address) {
                    $address['type'] = $type;
                    $order->addresses()->create($address);
                }
            }

            DB::commit();

            //event('order.created', $order, Auth::user());
           

        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }

        return redirect()->route('orders.payments.create', );
    }

}
-------------------------------------------------------------------------------------------------
my model
-------------------------------------------------------------------------------------------------
<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    use HasFactory;
    protected $fillable = [
        'store_id', 'user_id', 'payment_method', 'status', 'payment_status',
    ];

    public function store()
    {
        return $this->belongsTo(Store::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class)->withDefault([
            'name' => 'Guest Customer'
        ]);
    }

    public function products()
    {
        return $this->belongsToMany(Product::class , 'order_items' , 'order_id' , 'product_id' , 'id' , 'id')
            ->using(OrderItem::class)
            ->withPivot([
                'product_name' ,  'price' , 'quantity' ,'options'
            ]);
    }
    public function addresses()
    {
        return $this->hasMany(OrderAddress::class);
    }

    public function billingAddress()
    {
        return $this->hasOne(OrderAddress::class , 'order_id' , 'id')
            ->where('type' , '=', 'billing');
    }

    public function shippingAddress()
    {
        return $this->hasOne(OrderAddress::class , 'order_id' , 'id')
            ->where('type' , '=', 'shipping');
    }
    protected static function booted()
    {
        static::creating(function(Order $order) {
            // 20220001, 20220002
            $order->number = Order::getNextOrderNumber();
        });
    }

    public static function getNextOrderNumber()
    {
        // SELECT MAX(number) FROM orders
        $year =  Carbon::now()->year;
        $number = Order::whereYear('created_at', $year)->max('number');
        if ($number) {
            return $number + 1;
        }
        return $year . '0001';
    }
}
-------------------------------------------------------------------------------------------------
my model
-------------------------------------------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class OrderAddress extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = [
        'order_id', 'type', 'first_name', 'last_name', 'email', 'phone_number',
        'street_address', 'city', 'postal_code', 'state', 'country',
    ];
}
-------------------------------------------------------------------------------------------------
my model
-------------------------------------------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Pivot;

class OrderItem extends Pivot
{
    use HasFactory;

    protected $table = 'order_items';

    public $incrementing = true;

    public $timestamps = false;


    public function product()
    {
        $this->belongsTo(Product::class)->withDefault([
            'name' => $this->product_name
        ]);
    }

    public function order()
    {
        $this->belongsTo(Order::class);
    }
}
-------------------------------------------------------------------------------------------------
my schema
-------------------------------------------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Schema\ForeignKeyDefinition;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('store_id')->constrained('stores');
            $table->foreignId('user_id')
                ->nullable()
                ->constrained('users')
                ->nullOnDelete();
            $table->string('number')->unique();
            $table->string('payment_method');
            $table->enum('status' , ['pendding' , 'processing' , 'delivering' , 'completed' , 'cancelled' , 'refunded' ])
                ->default('pendding');
            $table->enum('payment_status' , ['pendding' , 'paid' , 'faild' ])
                ->default('pendding');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('orders');
    }
};

-------------------------------------------------------------------------------------------------
my schema
-------------------------------------------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('order_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('order_id')->constrained('orders')->cascadeOnDelete();
            $table->foreignId('product_id')->nullable()->constrained('products')->nullOnDelete();
            $table->string('product_name');
            $table->float('price');
            $table->unsignedSmallInteger('quantity')->default(1);
            $table->json('options')->nullable();
            $table->unique(['order_id','product_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('order_items');
    }
};

-------------------------------------------------------------------------------------------------
my schema
-------------------------------------------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('order_addresses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('order_id')->constrained('orders')
                ->cascadeOnDelete();
            $table->enum('type', ['billing', 'shipping']);
            $table->string('first_name');
            $table->string('last_name');
            $table->string('email')->nullable();
            $table->string('phone_number');
            $table->string('street_address');
            $table->string('city');
            $table->string('postal_code')->nullable();
            $table->string('state')->nullable();
            $table->char('country', 2);   
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('order_addresses');
    }
};

-------------------------------------------------------------------------------------------------
my data in postman 
-------------------------------------------------------------------------------------------------
{
    "addr": {
        "billing": {
            "name": "ahmed Doe",
            "address": "123 ahmed St",
            "city": "ahmed City",
            "postal_code": "12345",
            "country": "ahmed Country"
        },
        "shipping": {
            "name": "Jane Doe",
            "address": "456 Shipping St",
            "city": "Shipping City",
            "postal_code": "67890",
            "country": "Shipping Country"
        }
    }
}
-------------------------------------------------------------------------------------------------
why dont added data 
-------------------------------------------------------------------------------------------------